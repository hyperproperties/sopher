package language

import (
	"fmt"
	"iter"

	"github.com/dave/dst"
	"github.com/dave/dst/decorator"
	"github.com/hyperproperties/sopher/pkg/dstx"
	"github.com/hyperproperties/sopher/pkg/filesx"
)

type TestCodeGenerator struct{}

func NewTestCodeGenerator() TestCodeGenerator {
	return TestCodeGenerator{}
}

func (generator TestCodeGenerator) TestFilename(path string) string {
	dir, name, _ := filesx.Seperate(path)
	return fmt.Sprintf("%s/%s_hpcontract_test.go", dir, name)
}

func (generator TestCodeGenerator) TestName(path, function string, index uint) string {
	_, filename, _ := filesx.Seperate(path)
	return fmt.Sprintf("Test_%s_%s_%v_hpcontract", filename, function, index)
}

func (generator TestCodeGenerator) Contract(function FunctionContract) *dst.BlockStmt {
	return dstx.Block(
		dstx.DefineS("runner").As(dstx.Call(
			dstx.SelectS("NewTestRunner").FromS("sopher"),
		).PassS(function.CallName(), function.ContractName())),
		dstx.ExprStmt(dstx.Call(dstx.SelectS("N").FromS("runner")).PassS("100")),
		dstx.ExprStmt(dstx.Call(dstx.SelectS("Run").FromS("runner")).PassS("t")),
	)
}

func (generator TestCodeGenerator) Test(test string, function FunctionContract) *dst.FuncDecl {
	return dstx.
		DeclareFunction(test).
		With(generator.Contract(function)).
		As(dstx.TakingN(
			dstx.FieldS("t").Type(dstx.Star(dstx.SelectS("T").FromS("testing"))),
		).Void())
}

func (generator TestCodeGenerator) Functions(file File) *dst.File {
	builder := dstx.FileS(file.pkg).
		Import(
			dstx.ImportS("sopher", "github.com/hyperproperties/sopher/pkg/language"),
			dstx.AnonymousImportS("testing"),
		)

	for _, function := range file.functions {
		test := generator.TestName(file.path, function.name, function.index)
		declaration := generator.Test(test, function)
		builder.Declare(declaration)
	}

	node := builder.EOF()
	dstx.PrependStart(node, "// Code generated by sopher (https://github.com/hyperproperties/sopher). DO NOT EDIT.")

	return node
}

func (generator TestCodeGenerator) Files(files iter.Seq[File]) {
	for file := range files {
		// Create test file which is used to output the generated dst.
		test := generator.TestFilename(file.path)
		output, err := filesx.Create(test)
		if err != nil {
			continue // TODO: Error handling
		}

		// Generate test file with tests for all contracts and print it to the file.
		node := generator.Functions(file)
		decorator.Fprint(output, node)
	}
}

func (generator TestCodeGenerator) Remove(files iter.Seq[File]) {
	for file := range files {
		test := generator.TestFilename(file.path)
		if filesx.Exists(test) {
			filesx.Delete(test)
		}
	}
}
